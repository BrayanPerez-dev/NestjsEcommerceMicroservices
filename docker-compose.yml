services:
    postgres:
        image: postgres:latest
        container_name: postgres-db
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGDATA: /data/postgres
        ports:
            - '5432:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - ecommerce-network
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}',
                ]
            interval: 5s
            timeout: 5s
            retries: 5

    mongo:
        image: mongo:latest
        container_name: mongo-db
        ports:
            - '27017:27017'
        networks:
            - ecommerce-network
        volumes:
            - mongo-data:/data/db
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
            interval: 10s
            timeout: 10s
            retries: 5

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: zookeeper
        ports:
            - '2181:2181'
        networks:
            - ecommerce-network
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
        healthcheck:
            test: nc -z localhost 2181 || exit -1
            interval: 10s
            timeout: 5s
            retries: 3

    kafka:
        image: confluentinc/cp-kafka:7.9.1
        container_name: kafka
        ports:
            - '9092:9092'
        networks:
            - ecommerce-network
        depends_on:
            zookeeper:
                condition: service_healthy
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        healthcheck:
            test: kafka-topics --bootstrap-server broker:9092 --list
            interval: 30s
            timeout: 10s
            retries: 3

    kafdrop:
        image: obsidiandynamics/kafdrop
        restart: unless-stopped
        ports:
            - '9000:9000'
        environment:
            KAFKA_BROKER_CONNECT: 'kafka:9092'
        depends_on:
            - kafka
        networks:
            - ecommerce-network

    redis:
        image: redis:6.2-alpine
        container_name: redis
        ports:
            - '6379:6379'
        networks:
            - ecommerce-network

    common:
        build:
            context: ./common
            dockerfile: dockerfile
            args:
                - BUILD_DATE=${BUILD_DATE:-$(date +%Y%m%d_%H%M%S)}
        volumes:
            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules

    api-gateway:
        container_name: api-gateway
        build:
            context: .
            dockerfile: ./api-gateway/dockerfile
        ports:
            - '3000:3000'
        volumes:
            - ./api-gateway:/usr/src/app/api-gateway
            - /usr/src/app/api-gateway/node_modules

            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        depends_on:
            - common
            - users-microservice
            - auth-microservice
            - products-microservice
            - orders-microservice
            - cart-microservice
            - notifications-microservice
            - shipping-microservice
            - stock-microservice
            - redis
        restart: unless-stopped
        env_file:
            - .env

    auth-microservice:
        container_name: auth-microservice
        build:
            context: .
            dockerfile: ./auth-microservice/dockerfile
        volumes:
            - ./auth-microservice:/usr/src/app/auth-microservice
            - /usr/src/app/auth-microservice/node_modules

            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        depends_on:
            common:
                condition: service_started
            postgres:
                condition: service_healthy
            users-microservice:
                condition: service_started
        restart: unless-stopped
        env_file:
            - .env

    users-microservice:
        container_name: users-microservice
        build:
            context: .
            dockerfile: ./users-microservice/dockerfile
        volumes:
            - ./users-microservice:/usr/src/app/users-microservice
            - /usr/src/app/users-microservice/node_modules

            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        env_file:
            - .env
        depends_on:
            - common
            - postgres
            - kafka
        restart: unless-stopped

    products-microservice:
        container_name: products-microservice
        build:
            context: .
            dockerfile: ./products-microservice/dockerfile
        volumes:
            # Bind mount sayesinde kodda değişiklik otomatik yüklenir
            - ./products-microservice:/usr/src/app/products-microservice
            - /usr/src/app/products-microservice/node_modules

            # Ortak kütüphane bind mount ile paylaşılır:
            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        env_file:
            - .env
        depends_on:
            common:
                condition: service_started
            postgres:
                condition: service_healthy
            kafka:
                condition: service_started

    orders-microservice:
        container_name: orders-microservice
        build:
            context: .
            dockerfile: ./orders-microservice/dockerfile
        volumes:
            # Bind mount sayesinde kodda değişiklik otomatik yüklenir
            - ./orders-microservice:/usr/src/app/orders-microservice
            - /usr/src/app/orders-microservice/node_modules

            # Ortak kütüphane bind mount ile paylaşılır:
            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        env_file:
            - .env
        depends_on:
            common:
                condition: service_started
            postgres:
                condition: service_healthy
            kafka:
                condition: service_started

    cart-microservice:
        container_name: cart-microservice
        build:
            context: .
            dockerfile: ./cart-microservice/dockerfile
        volumes:
            # Bind mount sayesinde kodda değişiklik otomatik yüklenir
            - ./cart-microservice:/usr/src/app/cart-microservice
            - /usr/src/app/cart-microservice/node_modules

            # Ortak kütüphane bind mount ile paylaşılır:
            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        env_file:
            - .env
        depends_on:
            common:
                condition: service_started
            postgres:
                condition: service_healthy

    notifications-microservice:
        container_name: notifications-microservice
        build:
            context: .
            dockerfile: ./notifications-microservice/dockerfile
        volumes:
            # Bind mount sayesinde kodda değişiklik otomatik yüklenir
            - ./notifications-microservice:/usr/src/app/notifications-microservice
            - /usr/src/app/notifications-microservice/node_modules

            # Ortak kütüphane bind mount ile paylaşılır:
            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        env_file:
            - .env
        depends_on:
            common:
                condition: service_started
            postgres:
                condition: service_healthy
            kafka:
                condition: service_started

    shipping-microservice:
        container_name: shipping-microservice
        build:
            context: .
            dockerfile: ./shipping-microservice/dockerfile
        volumes:
            # Bind mount sayesinde kodda değişiklik otomatik yüklenir
            - ./shipping-microservice:/usr/src/app/shipping-microservice
            - /usr/src/app/shipping-microservice/node_modules

            # Ortak kütüphane bind mount ile paylaşılır:
            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        env_file:
            - .env
        depends_on:
            common:
                condition: service_started
            postgres:
                condition: service_healthy
            kafka:
                condition: service_started

    stock-microservice:
        container_name: stock-microservice
        build:
            context: .
            dockerfile: ./stock-microservice/dockerfile
        volumes:
            # Bind mount sayesinde kodda değişiklik otomatik yüklenir
            - ./stock-microservice:/usr/src/app/stock-microservice
            - /usr/src/app/stock-microservice/node_modules

            # Ortak kütüphane bind mount ile paylaşılır:
            - common-dist:/usr/src/app/common/dist
            - common-modules:/usr/src/app/common/node_modules
        networks:
            - ecommerce-network
        depends_on:
            common:
                condition: service_started
            postgres:
                condition: service_healthy
            kafka:
                condition: service_started

networks:
    ecommerce-network:
        driver: bridge

volumes:
    postgres_data:
        name: postgres_data
    mongo-data:
        name: mongo-data
    common-dist:
    common-modules:
